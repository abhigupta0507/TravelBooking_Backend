package com.example.demo.service;

import com.example.demo.dao.PackageDAO;
import com.example.demo.dto.CreatePackageRequestDto;
import com.example.demo.dto.PackageDetailDto;
import com.example.demo.dto.PackageStatus;
import com.example.demo.dto.UpdatePackageRequestDto;
import com.example.demo.model.ItineraryItem;
import com.example.demo.model.TourPackage;
import com.example.demo.util.AuthorizationService;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class PackageService {
    private final PackageDAO packageDAO;
    private final AuthorizationService authorizationService;

    public PackageService(PackageDAO packageDAO, AuthorizationService authorizationService) {
        this.packageDAO = packageDAO;
        this.authorizationService = authorizationService;
    }

    public List<TourPackage> findAllPackages() {
        return packageDAO.findAllPackages();
    }

    public  List<TourPackage> findPackagesByStatus(PackageStatus status){
        return packageDAO.findAllPackagesByStatus(status);
    }

    public PackageDetailDto findPackageBySlug(String slug){
        TourPackage thePackage = packageDAO.findPackageBySlug(slug);
        List<ItineraryItem> theItems = packageDAO.findAllItineraryItemsByPackageId(thePackage.getPackageId());
        return PackageDetailDto.from(thePackage,theItems);
    }

    public TourPackage createPackage(CreatePackageRequestDto requestDto) {
        // 1. Convert the DTO into a TourPackage model object.
        TourPackage newPackage = new TourPackage();
        newPackage.setName(requestDto.getName());
        newPackage.setTour_type(requestDto.getTour_type());
        newPackage.setImage_url(requestDto.getImage_url());
        newPackage.setDuration_days(requestDto.getDuration_days());
        newPackage.setPrice(requestDto.getPrice());
        newPackage.setMax_capacity(requestDto.getMax_capacity());
        newPackage.setItinerary_summary(requestDto.getItinerary_summary());
        newPackage.setStatus(requestDto.getStatus());
        // Note: slug and created_at are handled by the database. avg_rating is null by default.

        // 2. Call the DAO to save the new package and get its generated ID.
        Integer newPackageId = packageDAO.createPackage(newPackage);

        if (newPackageId == null) {
            throw new RuntimeException("Failed to create the package. No ID was returned.");
        }

        // 3. Fetch and return the newly created package by its ID.
        // This ensures we get the slug and created_at timestamp generated by the database.
        return packageDAO.findPackageById(newPackageId);
    }

    public TourPackage updatePackage(String slug, UpdatePackageRequestDto requestDto, String authHeader) throws Exception {
        // Step 1: Authorize the user first. This is a secure gateway.
        authorizationService.verifyAdminStaff(authHeader);

        // Step 2: Find the existing package by its slug.
        TourPackage existingPackage = packageDAO.findPackageBySlug(slug);

        // Step 3: If it doesn't exist, throw a specific exception for the controller to handle.
        if (existingPackage == null) {
            throw new Exception("Package with slug '" + slug + "' not found.");
        }

        // Step 4: Manually update the fields from the DTO.
        // This is the key step that prevents the Mass Assignment security vulnerability.
        existingPackage.setName(requestDto.getName());
        existingPackage.setTour_type(requestDto.getTour_type());
        existingPackage.setImage_url(requestDto.getImage_url());
        existingPackage.setDuration_days(requestDto.getDuration_days());
        existingPackage.setPrice(requestDto.getPrice());
        existingPackage.setMax_capacity(requestDto.getMax_capacity());
        existingPackage.setItinerary_summary(requestDto.getItinerary_summary());
        existingPackage.setStatus(requestDto.getStatus());

        // Step 5: Call the DAO to persist the changes.
        packageDAO.updatePackage(existingPackage);

        // Step 6: Return the fully updated package. This ensures we get the new slug if the name changed.
        return packageDAO.findPackageById(existingPackage.getPackageId());
    }


    public ItineraryItem createItineraryItem(ItineraryItem theItem){
        System.out.println(theItem);
        Integer newItemId = packageDAO.createItineraryItem(theItem);
        System.out.println(newItemId);

        if(newItemId == null){
            throw new RuntimeException("Failed to create the itinerary item. No ID was returned.");
        }

        return packageDAO.findItineraryItemsById(newItemId);
    }
}
